module Pascal

context-free start-symbols Program

context-free syntax // Programs and Blocks
  
  Program.Program = <
    <Programheading> 
    <Block>.
  >

  Programheading.ProgramHeading = <
    program <Identifier> (<{Identifier ", "}*>);
  > {case-insensitive}

  Block.Block = <
    <LabelDeclarations>
    <ConstantDefinitions>
    <TypeDefinitions>
    <VariableDeclarations>
    
    <{ProcedureOrFunctionDeclaration "\n\n"}*>
    
    begin  
      <{Statement ";\n"}*>     
      <Term>
    end
  > {case-insensitive} 
   
  LabelDeclarations.NoLabelDecls = <>

  LabelDeclarations.LabelDecls = <
    label 
       <{Label ", "}+>;
  > {case-insensitive}

  ConstantDefinitions.NoConstDefs = <>
  
  ConstantDefinitions.ConstDefs = <
    const 
       <{ConstantDefinition "\n"}+>
  > {case-insensitive}

  ConstantDefinition.ConstDef =
    <<Identifier> = <Constant>;>

  TypeDefinitions.NoTypeDefs = <>
  
  TypeDefinitions.TypeDefs = <
    type 
      <{TypeDefinition "\n"}+>
  > {case-insensitive}

  TypeDefinition.TypeDef =
    <<Identifier> = <Type>;>

  VariableDeclarations.NoVarDecls = <>
  
  VariableDeclarations.VarDecls = <
    var 
       <{VariableDeclaration "\n"}+>
  > {case-insensitive}

  VariableDeclaration.VarDecl =
    <<{VariableIdentifier ", "}+> : <Type>;>
    
  VariableIdentifier.VarId = <<Identifier>>

context-free syntax // procedure and function declarations

  ProcedureOrFunctionDeclaration.ProcDecl = <
    <ProcedureHeading>;
    <Block>;
  >   
  ProcedureOrFunctionDeclaration.ProcDirective = <
    <ProcedureHeading>;
    <Directive>;
  >    
  ProcedureOrFunctionDeclaration.ProcId = <
    <ProcedureIdentification>;
    <Block>;
  >
  ProcedureOrFunctionDeclaration.FuncDecl = <
    <FunctionHeading>; 
    <Block>;
  >    
  ProcedureOrFunctionDeclaration.FuncDirective = <
    <FunctionHeading>; 
    <Directive>;
  >   
  ProcedureOrFunctionDeclaration.FuncId = <
    <FunctionIdentification>;
    <Block>;
  >

  Directive.Forward = <forward> {case-insensitive}
  // Directive = Compilerdefineddirectives

context-free syntax // Procedure and Function Definitions

  ProcedureHeading.ProcHeading =
    <procedure <Identifier> <FormalParameters>> {case-insensitive}
    
  FunctionHeading.FuncHeading =
    <function <Identifier> <FormalParameters> : <ResultType>> {case-insensitive}

  ResultType = TypeIdentifier

  ProcedureIdentification.ProcId =
    <procedure <Identifier>> {case-insensitive}

  FunctionIdentification.FuncId =
    <function <Identifier>> {case-insensitive}

//  FormalParameters.NoParams = <>
  
  FormalParameters.Params =
    <(<{FormalParameter "; "}+>)>
    
  FormalParameter.ValueParams =
    <<{VarId ", "}+> : <ParameterType>>

  FormalParameter.VarParams =
    <var <{VarId ", "}+> : <ParameterType>> {case-insensitive}

  VarId.VarId = Identifier
  
  FormalParameter = ProcedureHeading
  FormalParameter = FunctionHeading

  ParameterType = TypeIdentifier 
  ParameterType = ConformantArraySchema

  ConformantArraySchema.PackedArraySchema = 
    <packed array [<BoundSpecification>] of <TypeIdentifier>> {case-insensitive}

  ConformantArraySchema.UnpackedArraySchema =
    <array [<{BoundSpecification "; "}+>] of <ArrayType>> {case-insensitive}
    
  ArrayType = TypeIdentifier 
  ArrayType = ConformantArraySchema

  BoundSpecification.BoundSpec =
    <<Identifier> .. <Identifier> : <TypeIdentifier>>

context-free syntax // Statements
 
  Statement.Labeled =
    <<Label> : <Statement>>
    // should probably not be another labeled statement
    
  // optional empty statement at end of block
  Term.NoTerm = <>
  Term.Term   = <;> 

  Statement.Assign =
    <<Variable> := <Expression>>

  Statement.ProcCall =
    <<Identifier><ActualParameters>>
    
  Statement.Goto =
    <goto <Label>> {case-insensitive}
  
  Statement.Compound = <
    begin 
      <{Statement ";\n"}+> 
      <Term>
    end
  > {case-insensitive}
  
  Statement.While = <
    while <Expression> do 
      <Statement>
  > {case-insensitive}
  
  Statement.Repeat = <
    repeat 
      <{Statement ";"}+> 
    until <Expression>
  > {case-insensitive}
  
  Statement.For = <
    for <Identifier> := <Expression> <UpDown> <Expression> do 
      <Statement>
  > {case-insensitive}
  
  UpDown.Up = <to> {case-insensitive}
  UpDown.Down = <downto> {case-insensitive}

  Statement.If = <
    if <Expression> then 
      <Statement>
  > {case-insensitive}
  
  Statement.IfElse = <
    if <Expression> then 
      <Statement>
    else 
      <Statement>
  > {case-insensitive}
  
  Statement.Case = <
    case <Expression> of
      <CaseLimb+>
    end
  > {case-insensitive}
  
  CaseLimb.CaseLimb = 
    <<{Constant ", "}+> : <Statement>;>

  Statement.With = <
    with <{Variable ", "}+> do
      <Statement>
  > {case-insensitive}
  
context-free syntax // parameters

  //ActualParameters.NoParams = <>
  
  ActualParameters.Params = <(<{Expression ", "}*>)>

context-free syntax // Expressions
  
  Expression        = <(<Expression>)> {bracket}  
  Expression        = Variable
  Expression        = Number
  Expression.String = String
  Expression.True   = <true> {case-insensitive}
  Expression.False  = <false> {case-insensitive}
  Expression.NilE   = <nil> {case-insensitive}
  Expression.Not    = <not <Expression>> {case-insensitive}
  Expression.Set    = <[<{Expression ","}*>]>
      
  Expression.Sign  = <<Sign> <Expression>>
  Expression.RelOp = <<Expression> <RelationalOperator> <Expression>>  {left} // ?
  Expression.AddOp = <<Expression> <AdditionOperator> <Expression>>  {left} // ?
  Expression.MulOp = <<Expression> <MultiplicationOperator> <Expression>>  {left} // ?
 
context-free syntax // operators

  RelationalOperator.EQ       = [=] 
  RelationalOperator.NEQ      = [<>] 
  RelationalOperator.LT       = [<]
  RelationalOperator.LEQ      = [<=] 
  RelationalOperator.GT       = [>]
  RelationalOperator.GEQ      = [>=] 
  RelationalOperator.IN       = <in> 
  
  AdditionOperator.ADD        = <+>
  AdditionOperator.MIN        = <-> 
  AdditionOperator.OR         = <or>
  
  MultiplicationOperator.MUL  = <*>
  MultiplicationOperator.DIV  = </>
  MultiplicationOperator.IDIV = <div>
  MultiplicationOperator.MOD  = <mod>
  MultiplicationOperator.AND  = <and>
  
context-free priorities

  {Expression.Sign Expression.Not} 
  > Expression.MulOp 
  > Expression.AddOp 
  > Expression.RelOp
  
context-free syntax // variables

  Variable.Ref = Identifier

  Variable.IndexVar = 
    <<Variable> [<{Expression ", "}*>]>
    
  Variable.FieldDes = 
    <<Variable>.<Identifier>>

  Variable.FileVar = 
    <<Variable>^>

  Variable.RefVar = 
    <<Variable>^>

  Expression.FunCall = 
    <<Identifier><ActualParameters>>
   
context-free syntax // Types

  Type = SimpleType 
  Type = TypeIdentifier
  
  TypeIdentifier.IntType = <integer> {case-insensitive}
  TypeIdentifier.BoolType = <boolean> {case-insensitive}
   
  TypeIdentifier.TypeId = Identifier
  
  SimpleType.EnumType = 
    <(<{Identifier ", "}+>)>
  
  SimpleType.SubrangeType =
    <<Constant> .. <Constant>>

  Type = 
    UnpackedStructuredType
    
  Type.Packed = 
    <packed <UnpackedStructuredType>> {case-insensitive}
  
  UnpackedStructuredType.ArrayType = 
    <array [<{SimpleType ", "}+>] of <Type>> {case-insensitive}
    
  UnpackedStructuredType.SetType = 
    <set of <Type>> {case-insensitive}

  UnpackedStructuredType.FileType = 
    <file of <Type>> {case-insensitive}

  Type.PointerType = 
    <^ <TypeIdentifier>>

context-free syntax // Record Fields

  UnpackedStructuredType.RecordType = <
    record  
      <FieldList>
    end
  > {case-insensitive}
  
  FieldList.FieldList = <
    <{RecordSection "\n"}*> 
    <Variants>
  >
  
  FieldList.FieldList = 
    <<{RecordSection "\n"}*>>

  RecordSection.RecordSection =
    <<{FieldIdentifier ", "}+> : <Type>;>

  FieldIdentifier.FieldId = Identifier
  
  Variants.Variant = <
    case <Tagfield?> <TypeIdentifier> of 
      <{Variant ";\n"}+>;
  > {case-insensitive}

  Tagfield.Tag = <<Identifier> :>

  Variant.Variant = 
    <<{Constant ", "}+> : (<FieldList>)>

context-free syntax // Input/Output

//  Outputlist = {Outputvalue ","}+
  
//  Outputvalue = <<Expression> ; <Fieldwidth> : <Fractionlength>>
//  Outputvalue = <<Expression> ; <Fieldwidth>>
//  Outputvalue = Expression
  
//  Fieldwidth = Expression
//  Fractionlength = Expression

lexical syntax // Variable and Identifier Categories

  Identifier = [a-zA-Z][a-zA-Z0-9\_]*
  
lexical restrictions

  Identifier -/- [a-zA-Z0-9\_]

context-free syntax

  Identifier = <program> {reject,case-insensitive}
  Identifier = <var> {reject,case-insensitive}
  Identifier = <type> {reject,case-insensitive}
  Identifier = <const> {reject,case-insensitive}
  Identifier = <function> {reject,case-insensitive}
  Identifier = <procedure> {reject,case-insensitive}
  Identifier = <begin> {reject,case-insensitive}
  Identifier = <end> {reject,case-insensitive}
  Identifier = <if> {reject,case-insensitive}
  Identifier = <then> {reject,case-insensitive}
  Identifier = <else> {reject,case-insensitive}
  Identifier = <case> {reject,case-insensitive}
  Identifier = <of> {reject,case-insensitive}
  Identifier = <integer> {reject,case-insensitive}
  Identifier = <boolean> {reject,case-insensitive}
  Identifier = <true> {reject,case-insensitive}
  Identifier = <false> {reject,case-insensitive}
  Identifier = <not> {reject,case-insensitive}
  
context-free syntax
  
  BoundIdentifier.BoundId     = Identifier

context-free syntax // Low Level Definitions
 
  Label.Label = Integernumber
  
  Constant.ConstId = Sign? Identifier 
  Constant         = Number
  Constant         = String
   
  Number.Int  = Integernumber 
  Number.Real = Realnumber
  
  Sign.Pos = <+>
  Sign.Neg = <->
  
lexical syntax // Numbers
  
  Integernumber = Digitsequence
  Realnumber    = Digitsequence "." Digitsequence? Scalefactor?
  Realnumber    = Digitsequence Scalefactor
  Scalefactor   = [Ee] [\+\-]? Digitsequence

  Unsigneddigitsequence = [0-9]+
  Digitsequence = [\+\-]? Unsigneddigitsequence

lexical restrictions

  Integernumber -/- [0-9]
  Realnumber -/- [0-9]
  
lexical syntax // Strings

  String = "'" Stringcharacter+  "'"
  Stringcharacter = ~[\'] 
  Stringcharacter = "''"

lexical syntax // layout
  
  LAYOUT           = [\ \t\n\r] // whitespace
  
  LAYOUT           = Comment
  
  Comment          = "{" InsideComment* "}" 
  InsideComment    = ~[\}] 
  InsideComment    = Comment // nested comment, not in standard
  
  Comment          = "(*" InsideParComment* "*)" 
  InsideParComment = ~[\*]
  InsideParComment = Asterisk
  Asterisk         = "*"

lexical restrictions

  Asterisk -/- [\)]
  
context-free restrictions

  LAYOUT? -/- [\ \t\n\r\{]
