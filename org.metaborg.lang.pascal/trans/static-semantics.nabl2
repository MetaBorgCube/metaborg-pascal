module static-semantics

imports 
  signatures/- 
  completion
  pp
  outline
  analysis
  
  nabl-lib

imports

  nabl2shared
  signatures/nabl2/shared/common/-
  signatures/nabl2/shared/constraints/-

  pp/nabl2/shared/common/-
  pp/nabl2/shared/constraints/-

  nabl2/shared/-

imports

  nabl2runtime 
  nabl2/runtime/analysis/-
  nabl2/runtime/common/-
  nabl2/runtime/editor/-
  nabl2/runtime/solver/-
  nabl2/runtime/stdlib/-
  nabl2/runtime/pp
  
signature 
  types
     IntT() 
     RealT() 
     BoolT()
     StringT()
     FunT(List(type), type) 
     ProcT(List(type))
     ArrayT(type)
     ArrayT(List(type), type)
     PointerT(type)
     FileT(type)
     SetT(type)
     RecordT(scope)
     SubrangeT(Constant, Constant)
     EnumT(scope)
         
     //Type(occurrence)
     NilT()

rules

  init ^ (s) := 
    new s,
    
    Var{"eof"} <- s, Var{"eof"} : BoolT(),
    
    Type{"integer"} <- s, Type{"integer"} : IntT(),
    Type{"boolean"} <- s, Type{"boolean"} : BoolT(),
    
    Proc{"writeln"} <- s, Proc{"writeln"} : ProcT(TCons(StringT(), TNil())),
    Proc{"readln"}  <- s, Proc{"readln"}  : ProcT(TCons(StringT(), TNil())),
    
    //intOp  == FunT(TCons(IntT(),  TCons(IntT(),  TNil())), IntT()),
    //compOp == FunT(TCons(IntT(),  TCons(IntT(),  TNil())), BoolT()),
    //relOp  == FunT(TCons(BoolT(), TCons(BoolT(), TNil())), BoolT()),
    
    Op{ADD()}  <- s, Op{ADD()}  : FunT(TCons(IntT(),  TCons(IntT(),  TNil())), IntT()),    
    Op{MIN()}  <- s, Op{MIN()}  : FunT(TCons(IntT(),  TCons(IntT(),  TNil())), IntT()),   
    Op{MUL()}  <- s, Op{MUL()}  : FunT(TCons(IntT(),  TCons(IntT(),  TNil())), IntT()),  
    Op{DIV()}  <- s, Op{DIV()}  : FunT(TCons(IntT(),  TCons(IntT(),  TNil())), IntT()),  
    Op{IDIV()} <- s, Op{IDIV()} : FunT(TCons(IntT(),  TCons(IntT(),  TNil())), IntT()),  
    Op{MOD()}  <- s, Op{MOD()}  : FunT(TCons(IntT(),  TCons(IntT(),  TNil())), IntT()), 
    
    Op{EQ()}   <- s, Op{EQ()}   : FunT(TCons(IntT(),  TCons(IntT(),  TNil())), BoolT()),
    Op{NEQ()}  <- s, Op{NEQ()}  : FunT(TCons(IntT(),  TCons(IntT(),  TNil())), BoolT()),
    Op{LT()}   <- s, Op{LT()}   : FunT(TCons(IntT(),  TCons(IntT(),  TNil())), BoolT()),
    Op{LEQ()}  <- s, Op{LEQ()}  : FunT(TCons(IntT(),  TCons(IntT(),  TNil())), BoolT()),
    Op{GT()}   <- s, Op{GT()}   : FunT(TCons(IntT(),  TCons(IntT(),  TNil())), BoolT()),
    Op{GEQ()}  <- s, Op{GEQ()}  : FunT(TCons(IntT(),  TCons(IntT(),  TNil())), BoolT()),
    
    Op{IN()}   <- s, Op{IN()}   : FunT(TCons(ty, TCons(SetT(ty), TNil())), BoolT()), 
                                  // correct?
                                    
    Op{OR()}   <- s, Op{OR()}   : FunT(TCons(BoolT(), TCons(BoolT(), TNil())), BoolT()),
    Op{AND()}  <- s, Op{AND()}  : FunT(TCons(BoolT(), TCons(BoolT(), TNil())), BoolT()).

rules

  [[ Program(h, b) ^ (s) ]] :=
    new s', s' -P-> s, 
    [[ h ^ (s) ]], [[ b ^ (s') ]].
    
  [[ ProgramHeading(name, _) ^ (s) ]] :=
     Program{name} <- s.
    
  [[ Block(lds, cds, tds, vds, pfds, stms, _) ^ (s) ]] := 
     [[ lds ^ (s) ]],
     [[ cds ^ (s) ]],
     [[ tds ^ (s) ]],
     [[ vds ^ (s) ]],
     Map[[ pfds ^ (s) ]],
     Map[[ stms ^ (s) ]].
     
  [[ NoLabelDecls() ^ (s) ]] := true.  
  [[ LabelDecls(_)  ^ (s) ]] := false | note "label declarations not implemented".
  
  [[ NoConstDefs()  ^ (s) ]] := true.  
  [[ ConstDefs(cds) ^ (s) ]] := Map[[ cds ^ (s) ]].  
  [[ ConstDef(x, c) ^ (s) ]] := Const{x} <- s, [[ c ^ (s) : ty ]], Const{x} : ty.
     
  [[ NoTypeDefs()  ^ (s) ]] := true. 
  [[ TypeDefs(tds) ^ (s) ]] := Map[[ tds ^ (s) ]].
  [[ TypeDef(x, t) ^ (s) ]] := Type{x} <- s, [[ t ^ (s) : ty ]], Type{x} : ty.
  
  [[ NoVarDecls()   ^ (s) ]] := true.
  [[ VarDecls(vds)  ^ (s) ]] := Map[[ vds ^ (s) ]].
  [[ VarDecl(xs, t) ^ (s) ]] := [[ t ^ (s) : ty]], MapT[[ xs ^ (s) : ty ]].
  [[ VarId(x) ^ (s) : ty ]] := Var{x} <- s, Var{x} : ty.
 
  // note: this does not implement declaration before use
  
  [[ ProcDecl(ph, b) ^ (s) ]] := 
     new s', s' -P-> s, 
     [[ ph ^ (s, s') ]], [[ b ^ (s') ]].
  
  [[ ProcDirective(_, _) ^ (s) ]] := false | error "ProcDirective not implemented".
  [[ ProcId(_, _) ^ (s) ]] := false | error "ProcId not implemented".
 
  [[ FuncDecl(ph, b) ^ (s) ]] := 
     new s', s' -P-> s, 
     [[ ph ^ (s, s') ]], [[ b ^ (s') ]].
  
  [[ FuncDirective(_, _) ^ (s) ]] := false | error "FuncDirectivenot implemented".
  [[ FuncId(_, _) ^ (s) ]] := false | error "FuncId not implemented". 
  
  // [[ Statements(stms) ^ (s) ]] := Map[[ stms ^ (s) ]].
  
rules // procedure and function definitions

  [[ ProcHeading(f, params) ^ (s_par, s) ]] := 
     [[ params ^ (s) : tys]],
     Proc{f} <- s_par, Proc{f} : ProcT(tys).
     
  [[ FuncHeading(f, params, t) ^ (s_par, s) ]] := 
     [[ params ^ (s) : tys]], 
     Func{f} <- s_par, Func{f} : FunT(tys, ty), 
     [[ t ^ (s) : ty ]], Var{f} <- s, Var{f} : ty. // return variable and type
     
  [[ FuncId(f) ^ (s_par, s) ]] :=
     Func{f} -> s_par, Func{f} |-> d, d : FunT(tys, ty).
     // reference to previous declaration?
  
  //[[ NoParams() ^ (s) : TNil() ]] := true. 
  [[ Params(params) ^ (s) : tys ]] := MapTs[[ params ^ (s) : tys]].
  
  [[ ValueParams([VarId(x)], t) ^ (s) : ty ]] := 
     Var{x} <- s, Var{x} : ty.
     // todo: generalize to list of variables 
     
  [[ VarParams([VarId(x)], t) ^ (s) : ty ]] := 
     Var{x} <- s, Var{x} : ty, [[ t ^ (s) : ty ]].
     // todo: generalize to list of variables 
          
  [[ PackedArraySchema(bss, t) ^ (s) : ArrayT(tys, ty) ]] := 
     MapTs[[ bss ^ (s) : tys ]], [[ t ^ (s) : ty ]].
     
  [[ UnpackedArraySchema(bss, t) ^ (s) : ArrayT(tys, ty) ]] := 
     MapTs[[ bss ^ (s) : tys ]], [[ t ^ (s) : ty ]].
     // todo: what to do with bounds
     
  [[ SubrangeType(c1, c2) ^ (s) : IntT() ]] :=
     [[ c1 ^ (s) : IntT() ]], [[ c2 ^ (s) : IntT() ]].
     
  [[ BoundSpec(lo, hi, t) ^ (s) ]] := 
     [[ t ^ (s) : ty ]]. 
     // todo: what are identifiers in bound specification?
     // t should be an ordinal type identifier, which means?

rules // statements

  //[[ Term(stm) ^ (s) ]] := 
  //   [[ stm ^ (s) ]].

  [[ Labeled(l, stm) ^ (s) ]] := 
     [[ l ^ (s) ]], [[ stm ^ (s) ]]. 
  
  [[ Assign(v, e) ^ (s) ]] := 
     [[ v ^ (s) : ty1 ]], [[ e ^ (s) : ty2 ]], ty1 == ty2.
     // todo: subtype check?
    
  [[ ProcCall(f, params) ^ (s) ]] := 
     Proc{f} -> s, Proc{f} |-> d, d: ProcT(tys), 
     [[ params ^ (s) : tys ]].
     
  [[ Goto(l) ^ (s) ]] := true. 
     // todo: anything to check?
  
  [[ Compound(stms, _) ^ (s) ]] :=
     Map[[ stms ^ (s) ]].
     
  [[ While(e, stm) ^ (s) ]] := 
     [[ e ^ (s) : ty ]], 
     ty == BoolT() | error "boolean expression expected",
     [[ stm ^ (s) ]].
     
  [[ Repeat(stm, e) ^ (s) ]] := 
     [[ e ^ (s) : ty ]], 
     ty == BoolT() | error "boolean expression expected",
     [[ stm ^ (s) ]].
     
  [[ For(x, e1, _, e2, stm) ^ (s) ]] :=
     new s', s' -P-> s, Var{x} <- s', Var{x} : IntT(),
     [[ e1 ^ (s) : IntT() ]], [[ e2 ^ (s) : IntT() ]], 
     [[ stm ^ (s') ]].
     // does for scope x?
     
  [[ If(e, stm) ^ (s) ]] :=
     [[ e ^ (s) : ty ]], 
     ty == BoolT() | error "boolean expression expected",
     [[ stm ^ (s) ]].
     
  [[ IfElse(e, stm1, stm2) ^ (s) ]] :=
     [[ e ^ (s) : ty ]], 
     ty == BoolT() | error "boolean expression expected",
     [[ stm1 ^ (s) ]], [[ stm2 ^ (s) ]].
     
  [[ Case(e, cs) ^ (s) ]] := 
     [[ e ^ (s) : ty ]], MapT[[ cs ^ (s) : ty ]].
     
  [[ CaseLimb(cnsts, stm) ^ (s) : ty ]] :=
     Map[[ cnsts ^ (s) : ty ]], [[ stm ^ (s) ]].
     
  [[ With(vs, stm) ^ (s) ]] := 
     [[ stm ^ (s) ]], 
     false | error "analysis for With not implemented".
     // todo: treat with variables

rules // parameters

  //[[ NoParams() ^ (s) : TNil()  ]] := true. 
  [[ Params(es) ^ (s) : tys ]] := MapTs[[ es ^ (s) : tys ]].
  
rules // expressions

  //[[ e1 @ Amb([e2 | _ ]) ^ (s) : ty ]] :=
  //   [[ e2 ^ (s) : ty ]],
  //   false | warning "ambiguous term" @e1.

  [[ True() ^ (s) : BoolT() ]] := true.
  
  [[ False() ^ (s) : BoolT() ]] := true.

  [[ String(_) ^ (s) : StringT() ]] := true.
  
  [[ NilE() ^ (s) : NilT() ]] := 
     false | error "what do do with nil?".
  
  [[ Not(e) ^ (s) : BoolT() ]] := 
     [[ e ^ (s) : BoolT() ]].
  
  [[ Sign(_, e) ^ (s) : IntT() ]] := 
     [[ e ^ (s) : IntT() ]]. // todo: ? 
  
  [[ RelOp(e1, op, e2) ^ (s) : ty ]] :=
     Op[[ op ^ (s) : FunT(TCons(ty1, TCons(ty2, TNil())), ty) ]],
     [[ e1 ^ (s) : ty_e1 ]], [[ e2 ^ (s) : ty_e2 ]],
     ty1 == ty_e1 | error $[[ty1] expected] @ e1,
     ty2 == ty_e2 | error $[[ty2] expected] @ e2. 
       
  [[ AddOp(e1, op, e2) ^ (s) : ty ]] :=
     Op[[ op ^ (s) : FunT(TCons(ty1, TCons(ty2, TNil())), ty) ]],
     [[ e1 ^ (s) : ty_e1 ]], [[ e2 ^ (s) : ty_e2 ]],
     ty1 == ty_e1 | error $[[ty1] expected] @ e1,
     ty2 == ty_e2 | error $[[ty2] expected] @ e2.
     
  [[ MulOp(e1, op, e2) ^ (s) : ty ]] :=
     Op[[ op ^ (s) : FunT(TCons(ty1, TCons(ty2, TNil())), ty) ]],
     [[ e1 ^ (s) : ty_e1 ]], [[ e2 ^ (s) : ty_e2 ]],
     ty1 == ty_e1 | error $[[ty1] expected] @ e1,
     ty2 == ty_e2 | error $[[ty2] expected] @ e2. 
     
  Op[[ op ^ (s) : ty ]] :=
    Op{op} -> s, Op{op} |-> d, d : ty.

rules // variables

  [[ Ref(x) ^ (s) : ty ]] :=
     Var{x} -> s, Var{x} |-> d, d : ty.
     // todo: identifier can also be other things: function, procedure, ...
     
  [[ IndexVar(v, es) ^ (s) : ty ]] :=
     [[ v ^ (s) : ArrayT(ty) ]], 
     MapT[[ es ^ (s) : ty ]].
     // todo: check es against declared dimensions of array
     
  [[ FieldDes(v, x) ^ (s) : ty ]] :=
     [[ v ^ (s) : RecordT(s') ]],
     Field{x} -> s', Field{x} |-> d, d : ty.
     
  [[ FileVar(v) ^ (s) : ty ]] := 
     [[ v ^ (s) : FileT(ty) ]].
     
  [[ RefVar(v) ^ (s) : ty ]] :=
     [[ v ^ (s) : PointerT(ty) ]].
     
  [[ Set(es) ^ (s) : SetT(ty) ]] :=
     MapT[[ es ^ (s) : ty ]].
     
  [[ FunCall(x, params) ^ (s) : ty ]] := 
     Func{x} -> s, Func{x} : FunT(tys, ty),
     [[ params ^ (s) : tys ]].

rules // types

  // type equality: nominal or structural?
  
  // [[ IntType()  ^ (s) : IntT()  ]] := true.
  
  // [[ BoolType() ^ (s) : BoolT() ]] := true.

  [[ TypeId(x) ^ (s) : ty ]] := 
     Type{x} -> s, Type{x} |-> d, d : ty.
  
  [[ EnumType(xs) ^ (s) : EnumT(s') ]] := 
     new s', false | note "EnumType not implemented".
    
  [[ SubrangeType(c1, c2) ^ (s) : SubrangeT(c1, c2) ]] :=
     [[ c1 ^ (s) : IntT() ]], [[ c2 ^ (s) : IntT() ]].
    
  [[ Packed(t) ^ (s) : ty ]] :=
     false | note "Packed type not implemented".    
    
  [[ ArrayType(ts, t) ^ (s) : ArrayT(tys, ty) ]] :=
     MapTs[[ ts ^ (s) : tys ]], [[ t ^ (s) : ty ]].

  [[ SetType(t)     ^ (s) : SetT(ty)     ]] := [[ t ^ (s) : ty ]].    
  
  [[ FileType(t)    ^ (s) : FileT(ty)    ]] := [[ t ^ (s) : ty ]].   
   
  [[ PointerType(t) ^ (s) : PointerT(ty) ]] := [[ t ^ (s) : ty ]].
         
rules // record types

  [[ RecordType(fs) ^ (s) : RecordT(s') ]] :=
     new s', s' -P-> s, [[ fs ^ (s') ]].
     
  [[ FieldList(rss) ^ (s) ]] :=
     Map[[ rss ^ (s) ]].
     
  [[ FieldList(rss, variant) ^ (s) ]] :=
     Map[[ rss ^ (s) ]],
     false | note "record type with variant not implemented". 
     
  [[ RecordSection(xs, t) ^ (s) ]] :=
     [[ t ^ (s) : ty ]], 
     MapT[[ xs ^ (s) : ty ]].
     
  [[ FieldId(x) ^ (s) : ty ]] := 
     Field{x} <- s, Field{x} : ty.
     
  // todo: variants

rules // constants

  [[ ConstId(_, x) ^ (s) : ty ]] := 
     Const{x} -> s, Const{x} |-> d, d : ty.
     
  [[ Int(_)  ^ (s) : IntT()  ]] := true.
  [[ Real(_) ^ (s) : RealT() ]] := true.
  

   