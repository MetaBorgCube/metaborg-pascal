module static-semantics

imports

  nabl2shared
  nabl2runtime 
  
imports 
  signatures/- 
  completion
  pp
  outline
  analysis
  nabl-lib
  types
  
  
signature
     name resolution
         namespaces Program Var Lab LabRef Func Type

rules // run-time library (=> define separately?)

  init ^ (s) := 
    new s,
    
    Var{"eof"} <- s, Var{"eof"} : BoolT(),
    Var{"nil"} <- s, Var{"nil"} : PointerT(ty),
    
    Type{"integer"} <- s, Type{"integer"} : IntT(),
    Type{"boolean"} <- s, Type{"boolean"} : BoolT(),
    Type{"string"}  <- s, Type{"string"}  : ArrayT(IntT(),CharT()),
    Type{"char"}    <- s, Type{"char"}    : CharT(),
    Type{"text"}	<- s, Type{"file"}	  : FileT(CharT()), // section 6.4.3.5, last note
    // Type{"char"} <! Type{"string"},
    
    // _void is used instead of void, because void can be defined as type
    Type{"_void"} 	<- s, Type{"_void"}	  : VoidT(),    
    
    Func{"writeln"} <- s, Func{"writeln"} : FunT([ArrayT(IntT(),CharT())],VoidT()),
    Func{"readln"}  <- s, Funcc{"readln"}  : FunT([ArrayT(IntT(),CharT())],VoidT()),
     
    Op{ADD()}  <- s, Op{ADD()}  : FunT([IntT(), IntT()], IntT()),    
    Op{MIN()}  <- s, Op{MIN()}  : FunT([IntT(), IntT()], IntT()),     
    Op{MUL()}  <- s, Op{MUL()}  : FunT([IntT(), IntT()], IntT()),    
    Op{DIV()}  <- s, Op{DIV()}  : FunT([IntT(), IntT()], IntT()), 
    Op{IDIV()} <- s, Op{IDIV()} : FunT([IntT(), IntT()], IntT()), 
    Op{MOD()}  <- s, Op{MOD()}  : FunT([IntT(), IntT()], IntT()), 
    
    Op{EQ()}   <- s, Op{EQ()}   : FunT([IntT(), IntT()], BoolT()), 
    Op{NEQ()}  <- s, Op{NEQ()}  : FunT([IntT(), IntT()], BoolT()), 
    Op{LT()}   <- s, Op{LT()}   : FunT([IntT(), IntT()], BoolT()), 
    Op{LEQ()}  <- s, Op{LEQ()}  : FunT([IntT(), IntT()], BoolT()), 
    Op{GT()}   <- s, Op{GT()}   : FunT([IntT(), IntT()], BoolT()), 
    Op{GEQ()}  <- s, Op{GEQ()}  : FunT([IntT(), IntT()], BoolT()), 
    
    Op{IN()}   <- s, Op{IN()}   : FunT([ty, SetT(ty)], BoolT()), 
                                    
    Op{OR()}   <- s, Op{OR()}   : FunT([BoolT(), BoolT()], BoolT()), 
    Op{AND()}  <- s, Op{AND()}  : FunT([BoolT(), BoolT()], BoolT()).

rules

  [[ Program(h, b) ^ (s) ]] :=
    new s', s' -P-> s, 
    [[ h ^ (s) ]], [[ b ^ (s') ]].
    
  [[ ProgramHeading(name, _) ^ (s) ]] :=
     Program{name} <- s,
     Program{name} : ProgramT().
    
  [[ Block(lds, cds, tds, vds, pfds, stms, _) ^ (s) ]] := 
  	 distinct D(s)/Lab | error $[Duplicate Label] @NAMES, // distinct labels
  	 distinct D(s)/LabRef | error $[Duplicate Label usage] @NAMES, // distinct labels
  	 distinct D(s)/Type | error $[Duplicate type declaration] @NAMES,
  	 distinct D(s)/Var | error $[Duplicate variable/constant] @NAMES, //distinct variables
  	 distinct D(s)/Func | error $[Duplicate Function/Procedure] @NAMES,
     [[ lds ^ (s) ]], // labels
     [[ cds ^ (s) ]], // constants
     [[ tds ^ (s) ]], // types
     [[ vds ^ (s) ]], // variables
     Map[[ pfds ^ (s) ]], // procedures and functions
     Map[[ stms ^ (s) ]]. // actual code
     
  [[ None() ^ (s) ]] := true.
  
  [[ LabelDecls(labels)  ^ (s) ]] := Map[[ labels ^ (s) ]].
  [[ Label(num) ^ (s) ]] :=
  	Lab{num} <- s.
  
  // Common iterative scope end statement
  [[ [] ^ (s, s_outer) ]] := true.

  [[ ConstDefs(cds) ^ (s) ]] := [[ cds ^ (s, s) ]].  
  [[ [ConstDef(x, c) | constdefs ] ^ (s, s_outer) ]] := 
  	[[ c ^ (s_outer) : ty ]], 
  	new s',
  	s ---> s',
  	Const{x} <- s', 
  	Const{x} : ty,
  	Var{x} <- s_outer,
  	Var{x} : ty,
  	[[ constdefs ^ (s', s_outer) ]].
  	// todo: add immutible  
  	
  [[ TypeId(t) ^ (s) : ty ]] := 
	Type{t} -> s,
	Type{t} |-> d,
	d : ty.
     
  [[ TypeDefs(tds) ^ (s) ]] := [[ tds ^ (s, s) ]].
  [[ [TypeDef(x, t) | typedefs] ^ (s, s_outer) ]] := 
  	[[ t ^ (s_outer) : ty ]], 
  	new s',
  	s ---> s',
  	Type{x} <- s', 
  	Type{x} : ty,
  	[[ typedefs ^ (s', s_outer) ]].
  	
  [[ ArrayType(range, t) ^ (s) : ty ]] := 
    [[ range ^ (s) : rty ]],
    [[ t ^ (s) : tty ]],
    ty == ArrayT(rty, tty). 
  	
  [[ SubrangeType(lower, upper) ^ (s) : ty ]] :=
  	[[ lower ^ (s) : ty ]],
  	[[ upper ^ (s) : ty ]].

  [[ VarDecls(vds)  ^ (s) ]] := Map[[ vds ^ (s) ]].
  [[ VarDecl(xs, t) ^ (s) ]] := [[ t ^ (s) : ty]], MapT[[ xs ^ (s) : ty ]].
  [[ VarId(x) ^ (s) : ty ]] := Var{x} <- s, Var{x} : ty.
  // todo: add check for shadowing
  
  // [[ FuncDirective(_, _) ^ (s) ]] := false | error "FuncDirectivenot implemented".
  // [[ FuncId(_, _) ^ (s) ]] := false | error "FuncId not implemented". 
  
  
rules // procedure and function definitions
  [[ FuncDecl(ph, b) ^ (s) ]] := 
     new s', s' -P-> s, 
     [[ ph ^ (s, s') ]], [[ b ^ (s') ]].
     
  [[ FuncHeading(f, params, t) ^ (s_par, s) ]] := 
     [[ params ^ (s) : tys ]], 
     [[ t ^ (s) : ty ]], 
     Func{f} <- s_par, Func{f} : FunT(tys, ty), 
     Var{f} <- s, Var{f} : ty. // return variable and type
     
  [[ FuncId(f) ^ (s_par, s) ]] :=
     Func{f} -> s_par, Func{f} |-> d, d : FunT(tys, ty).
     // reference to previous declaration?
  
  [[ Params(params) ^ (s) : tys ]] := MapTs[[ params ^ (s) : tys]].
  
  [[ ValueParams(vars, t) ^ (s) : ty ]] := 
  	 MapT[[ vars ^ (s) : ty]],
	 [[ t ^ (s) : ty ]].
     
  [[ VarParams(vars, t) ^ (s) : ty ]] := 
  	 MapT[[ vars ^ (s) : ty]],
	 [[ t ^ (s) : ty ]].
               
  [[ PackedArraySchema(bss, t) ^ (s) : ArrayT(tys, ty) ]] := 
     MapTs[[ bss ^ (s) : tys ]], [[ t ^ (s) : ty ]].
     
  [[ UnpackedArraySchema(bss, t) ^ (s) : ArrayT(tys, ty) ]] := 
     MapTs[[ bss ^ (s) : tys ]], [[ t ^ (s) : ty ]].
     // todo: what to do with bounds
          
  [[ BoundSpec(lo, hi, t) ^ (s) ]] := 
     [[ t ^ (s) : ty ]]. 
     // todo: what are identifiers in bound specification?
     // t should be an ordinal type identifier, which means?

rules // statements

  [[ Labeled(l, stm) ^ (s) ]] := 
  	 Lab{l} -> s,
  	 Lab{l} |-> d | error $[label not declared],
  	 LabRef{l} <- s,
     [[ stm ^ (s) ]]. 
  
  [[ Assign(v, e) ^ (s) ]] := 
     [[ v ^ (s) : ty1 ]], [[ e ^ (s) : ty2 ]], ty1 == ty2 | error $[[ty1] expected] @ v.
     // todo: subtype check?

     
  [[ Goto(l) ^ (s) ]] := 
	LabRef{l} -> s,
	LabRef{l} |-> d | error $[Label never used].
  
  [[ Compound(stms, _) ^ (s) ]] :=
     Map[[ stms ^ (s) ]].
     
  [[ While(e, stm) ^ (s) ]] := 
     [[ e ^ (s) : ty ]], 
     ty == BoolT() | error "boolean expression expected",
     [[ stm ^ (s) ]].
     
  [[ Repeat(stm, e) ^ (s) ]] := 
     [[ e ^ (s) : ty ]], 
     ty == BoolT() | error "boolean expression expected",
     [[ stm ^ (s) ]].
     
  [[ For(x, e1, _, e2, stm) ^ (s) ]] :=
     new s', s' -P-> s, Var{x} <- s', Var{x} : IntT(),
     [[ e1 ^ (s) : IntT() ]], [[ e2 ^ (s) : IntT() ]], 
     [[ stm ^ (s') ]].
     // does for scope x?
     
  [[ If(e, stm) ^ (s) ]] :=
     [[ e ^ (s) : ty ]], 
     ty == BoolT() | error "boolean expression expected",
     [[ stm ^ (s) ]].
     
  [[ IfElse(e, stm1, stm2) ^ (s) ]] :=
     [[ e ^ (s) : ty ]], 
     ty == BoolT() | error "boolean expression expected",
     [[ stm1 ^ (s) ]], [[ stm2 ^ (s) ]].
     
  [[ Case(e, cs) ^ (s) ]] := 
     [[ e ^ (s) : ty ]], MapT[[ cs ^ (s) : ty ]].
     
  [[ CaseLimb(cnsts, stm) ^ (s) : ty ]] :=
     MapT[[ cnsts ^ (s) : ty ]],
     [[ stm ^ (s) ]].
     
  [[ With(v, stm) ^ (s) ]] := 
     new s',
     s' -P-> s,
     [[ v ^ (s) : vty ]],
     vty == RecordT(rec_d) | error $[This is not a record],
     rec_d ?===> s_rec,
     s' -I-> s_rec,
     [[ stm ^ (s') ]].
  
  [[ Set(arr) ^ (s) : ty ]] :=
  	MapT[[ arr ^ (s) : inner_type ]],
  	ty == SetT(inner_type).
  	// todo: Add range test

rules // parameters

  [[ Params(es) ^ (s) : tys ]] := MapTs[[ es ^ (s) : tys ]].
  
rules // expressions

  [[ True() ^ (s) : BoolT() ]] := true.
  
  [[ False() ^ (s) : BoolT() ]] := true.

  [[ String(_) ^ (s) : ArrayT(IntT(),CharT()) ]] := true.
  [[ Char(_) ^ (s) : CharT() ]] := true.
  
  [[ NilE() ^ (s) : VoidT() ]] := true.
  
  [[ Not(e) ^ (s) : BoolT() ]] := 
     [[ e ^ (s) : BoolT() ]].
  
  [[ Sign(_, e) ^ (s) : IntT() ]] := 
     [[ e ^ (s) : IntT() ]].
  
  [[ RelOp(e1, op, e2) ^ (s) : ty ]] :=
     Op[[ op ^ (s) : FunT([ty1, ty2], ty) ]],
     [[ e1 ^ (s) : ty_e1 ]], [[ e2 ^ (s) : ty_e2 ]],
     ty1 == ty_e1 | error $[[ty1] expected] @ e1,
     ty2 == ty_e2 | error $[[ty2] expected] @ e2. 
       
  [[ AddOp(e1, op, e2) ^ (s) : ty ]] :=
     Op[[ op ^ (s) : FunT([ty1, ty2], ty) ]],
     [[ e1 ^ (s) : ty_e1 ]], [[ e2 ^ (s) : ty_e2 ]],
     ty1 == ty_e1 | error $[[ty1] expected] @ e1,
     ty2 == ty_e2 | error $[[ty2] expected] @ e2.
     
  [[ MulOp(e1, op, e2) ^ (s) : ty ]] :=
     Op[[ op ^ (s) : FunT([ty1, ty2], ty) ]],
     [[ e1 ^ (s) : ty_e1 ]], [[ e2 ^ (s) : ty_e2 ]],
     ty1 == ty_e1 | error $[[ty1] expected] @ e1,
     ty2 == ty_e2 | error $[[ty2] expected] @ e2. 
     
  Op[[ op ^ (s) : ty ]] :=
    Op{op} -> s, Op{op} |-> d, d : ty.

rules // variables


  [[ Ref(x) ^ (s) : ty ]] :=
     Var{x} -> s, Var{x} |-> d, d : ty.
     
  [[ Ref(x) ^ (s) : ty ]] :=
     Var{x} -> s, Var{x} |-> d, ty == RecordT(d).
    	     
  [[ IndexVar(v, es) ^ (s) : ty ]] :=
     [[ v ^ (s) : ArrayT(index_ty, ty) ]], 
     [[ es ^ (s) : index_ty ]].
     
  [[ FieldDes(v, x) ^ (s) : ty ]] :=
     new s',
     [[ v ^ (s) : vty ]],
     vty == RecordT(rec_d) | error $[This is not a record],
     rec_d ?===> s_rec,
     s' ---> s_rec,
     Field{x} -> s', 
     Field{x} |-> d, 
     d : ty. 
     
  [[ FileVar(v) ^ (s) : ty ]] := 
     [[ v ^ (s) : FileT(ty) ]].
     
  [[ RefVar(v) ^ (s) : ty ]] :=
     [[ v ^ (s) : PointerT(ty) ]].
     
  [[ Set(es) ^ (s) : SetT(ty) ]] :=
     MapT[[ es ^ (s) : ty ]].
     
  [[ FunCall(x, params) ^ (s) : ty ]] := 
     [[ params ^ (s) : tys ]],
     Func{x} -> s, 
	 Func{x} |-> d,
	 d : FunT(tys, ty).
	
  [[ ConstId(_, x) ^ (s) : ty ]] := 
     Const{x} -> s, Const{x} |-> d, d : ty.
     
  [[ Int(_)  ^ (s) : IntT() ]] := true.
  [[ Real(_) ^ (s) : RealT() ]] := true.
  
  [[ Neg() ^ (s) : IntT() ]] := true.
  [[ Pos() ^ (s) : IntT() ]] := true.
  

   